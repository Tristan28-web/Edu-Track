
"use client";

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import { Zap, Lightbulb, CheckSquare, Loader2, AlertTriangle } from "lucide-react";
import { Textarea } from "@/components/ui/textarea";
import { generateMathProblems, type GenerateMathProblemsOutput, type GenerateMathProblemsInput } from '@/ai/flows/generate-math-problems';
import { generateMathHint } from '@/ai/flows/generate-math-hint';
import { toast } from "@/hooks/use-toast";
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';

const topics = [
  { name: "Quadratic Equations & Functions", slug: "quadratic-equations-functions" },
  { name: "Rational Algebraic Expressions", slug: "rational-algebraic-expressions" },
  { name: "Variation", slug: "variation" },
  { name: "Polynomial Functions", slug: "polynomial-functions" },
  { name: "Exponential & Logarithmic Functions", slug: "exponential-logarithmic-functions" },
  { name: "Sequences and Series", slug: "sequences-series" },
  { name: "Probability", slug: "probability" },
  { name: "Statistics", slug: "statistics" },
];

const difficulties: GenerateMathProblemsInput['difficulty'][] = ["easy", "medium", "hard"];

interface DisplayProblem {
  id: string;
  topic: string;
  topicSlug: string;
  difficulty: GenerateMathProblemsInput['difficulty'];
  problemText: string;
  hint: string;
  solution: string; // Placeholder
}

export default function ChallengeProblemsPage() {
  const [selectedProblem, setSelectedProblem] = useState<DisplayProblem | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isLoadingProblem, setIsLoadingProblem] = useState(false);
  const [problemError, setProblemError] = useState<string | null>(null);
  const [currentAnswer, setCurrentAnswer] = useState("");

  const handleOpenProblem = async (topicName: string, topicSlug: string, difficulty: GenerateMathProblemsInput['difficulty']) => {
    setIsLoadingProblem(true);
    setProblemError(null);
    setSelectedProblem(null);
    setIsModalOpen(true); // Open modal to show loading state

    try {
      // Generate the problem
      const problemResponse: GenerateMathProblemsOutput = await generateMathProblems({
        topic: topicName,
        difficulty: difficulty,
        number: 1,
      });

      if (!problemResponse.problems || problemResponse.problems.length === 0) {
        throw new Error("No problem was generated by the AI.");
      }
      
      const problemText = problemResponse.problems[0];

      // Now, generate the hint for the problem
      const hintResponse = await generateMathHint({ problem: problemText });
      const hintText = hintResponse.hint;
      
      setSelectedProblem({
        id: `${topicSlug}-${difficulty}-${Date.now()}`,
        topic: topicName,
        topicSlug: topicSlug,
        difficulty: difficulty,
        problemText: problemText,
        hint: hintText, // Use the AI-generated hint
        solution: `Placeholder solution for ${difficulty} ${topicName} problem. The detailed answer will be available after submission.`,
      });
      setCurrentAnswer(""); // Reset answer field
    } catch (err: any) {
      console.error("Error generating challenge problem or hint:", err);
      const errorMessage = err.message || "Failed to generate a challenge. Please try again.";
      setProblemError(errorMessage);
      toast({
        title: "Error Generating Challenge",
        description: errorMessage,
        variant: "destructive",
      });
      // Do not close modal on error, show error inside or allow close
    } finally {
      setIsLoadingProblem(false);
    }
  };
  
  const handleSubmitAnswer = () => {
    // Placeholder: In a real app, you'd submit the answer, check it (possibly with another AI call or predefined solution),
    // and update student progress/achievements.
    toast({
        title: "Answer Submitted (Placeholder)",
        description: "In a real app, your answer would be checked here!"
    });
    // Potentially show solution after submission
  }

  return (
    <div className="space-y-8">
      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle className="text-3xl font-headline text-primary flex items-center gap-2">
            <Zap className="h-8 w-8" /> Challenge Problems
          </CardTitle>
          <CardDescription>Test your Grade 10 Math skills with these dynamically generated challenging problems.</CardDescription>
        </CardHeader>
      </Card>

      {topics.length > 0 ? (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {topics.map((topic) => (
            <Card key={topic.slug} className="shadow-md flex flex-col">
              <CardHeader>
                <CardTitle className="text-xl font-headline text-primary/90">{topic.name}</CardTitle>
                <CardDescription>Problems for {topic.name.toLowerCase()}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3 flex-grow flex flex-col justify-end">
                {difficulties.map((difficulty) => (
                  <Button
                    key={difficulty}
                    variant="outline"
                    className="w-full capitalize"
                    onClick={() => handleOpenProblem(topic.name, topic.slug, difficulty)}
                    disabled={isLoadingProblem}
                  >
                    {isLoadingProblem && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                    {difficulty} Challenge
                  </Button>
                ))}
              </CardContent>
            </Card>
          ))}
        </div>
      ) : (
         <Card>
          <CardContent className="pt-6">
            <p className="text-muted-foreground text-center">No challenge topics available at the moment.</p>
          </CardContent>
        </Card>
      )}

      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
        <DialogContent className="sm:max-w-2xl w-[90vw] md:w-full">
          <DialogHeader>
            <DialogTitle className="text-2xl font-headline text-primary capitalize">
              {selectedProblem ? `${selectedProblem.topic} - ${selectedProblem.difficulty}` : "Generating Challenge..."}
            </DialogTitle>
            <DialogDescription>
              {selectedProblem ? "Solve the problem below. Good luck!" : "Fetching a new challenge for you..."}
            </DialogDescription>
          </DialogHeader>
          
          {isLoadingProblem && (
            <div className="flex flex-col items-center justify-center space-y-3 py-8 min-h-[200px]">
              <Loader2 className="h-12 w-12 animate-spin text-primary" />
              <p className="text-muted-foreground">Generating your challenge problem...</p>
            </div>
          )}

          {problemError && !isLoadingProblem && (
            <Alert variant="destructive" className="my-4">
              <AlertTriangle className="h-5 w-5" />
              <AlertTitle>Error Generating Problem</AlertTitle>
              <AlertDescription>{problemError}</AlertDescription>
            </Alert>
          )}
            
          {!isLoadingProblem && selectedProblem && (
            <div className="space-y-6 py-4 max-h-[70vh] overflow-y-auto pr-3">
              <div className="p-4 border rounded-md bg-secondary/20">
                <p className="text-lg text-foreground/90 leading-relaxed whitespace-pre-wrap">{selectedProblem.problemText}</p>
              </div>

              <div>
                <label htmlFor={`answer-${selectedProblem.id}`} className="block text-sm font-medium text-muted-foreground mb-1">Your Answer/Approach:</label>
                <Textarea
                  id={`answer-${selectedProblem.id}`}
                  rows={4}
                  className="w-full p-2 border rounded-md focus:ring-primary focus:border-primary"
                  placeholder="Type your solution or steps here..."
                  value={currentAnswer}
                  onChange={(e) => setCurrentAnswer(e.target.value)}
                />
              </div>

              <div className="flex space-x-4">
                <Button variant="outline" onClick={() => toast({ title: "Hint", description: selectedProblem.hint, duration: 10000 })}>
                  <Lightbulb className="mr-2 h-4 w-4" /> Show Hint
                </Button>
                <Button onClick={handleSubmitAnswer}>
                  <CheckSquare className="mr-2 h-4 w-4" /> Submit Answer
                </Button>
              </div>
            </div>
          )}
          <DialogFooter className="sm:justify-start mt-4">
            <DialogClose asChild>
              <Button type="button" variant="outline">
                Close
              </Button>
            </DialogClose>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
